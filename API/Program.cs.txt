using API.Middleware;
using API.SignalR;
using Core.Entities;
using Core.Interfaces;
using Infrastructure.Data;
using Infrastructure.Services;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using StackExchange.Redis;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();


// add DbContext

builder.Services.AddDbContext<StoreContext>(opt =>
{
  opt.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});
// inject and replace interface by the instance in any https scoped
// Dependency injection
builder.Services.AddScoped<IProductRepository, ProductRepository>();
builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));

// Unit of Work
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

// cors
builder.Services.AddCors();

// add redis
builder.Services.AddSingleton<IConnectionMultiplexer>(config =>
{
  var connString = builder.Configuration.GetConnectionString("Redis") ?? throw new Exception("Cannot get redis connection string");
  var configuration = ConfigurationOptions.Parse(connString, true);

  return ConnectionMultiplexer.Connect(configuration);
});
builder.Services.AddSingleton<ICartService, CartService>();

// identity - aspnet authorization
//            adding roles
builder.Services.AddAuthorization();
builder.Services.AddIdentityApiEndpoints<AppUser>()
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<StoreContext>();

// Add PaymentService
builder.Services.AddScoped<IPaymentService, PaymentService>();
// Add CuponService
builder.Services.AddScoped<ICouponService, CouponService>();


// Add SignalR
builder.Services.AddSignalR();

// after are services to inject
var app = builder.Build();
// before are Middlewares

// Configure the HTTP request pipeline.
// if (app.Environment.IsDevelopment())
// {
//     app.MapOpenApi();
// }

// app.UseHttpsRedirection();
// app.UseAuthorization();
app.UseMiddleware<ExceptionMiddleware>();

app.UseCors(x => x.AllowAnyHeader().AllowAnyMethod().AllowCredentials()
  .WithOrigins("http://localhost:4200", "https://localhost:4200"));

// For SignalR authentication
app.UseAuthentication();
app.UseAuthorization();
// End SignalR


// Adding a middleware to allow server static files ( angular client )
app.UseDefaultFiles();
app.UseStaticFiles();



app.MapControllers();
// add microsoft identity
// app.MapIdentityApi<AppUser>(); // /login
// Note: SignalR doesn't use app.MapGroup("api").MapIdentityApi<AppUser>(); to authenticate,
app.MapGroup("api").MapIdentityApi<AppUser>(); // api/login

// Add SignalR Hub
app.MapHub<NotificationHub>("/hub/notification");


// for Angular client, see FallbackController
app.MapFallbackToController("Index", "Fallback");



// Initialize the database if there are not any data
try
{
  /*
  In .NET, DI is commonly implemented using a service container or service provider. This container holds a collection of services that can be injected into any class that needs them. Services can be registered with different lifetimes:

      Transient: A new instance is created every time it is requested.
      Scoped: A new instance is created once per request or scope.
      Singleton: A single instance is created and shared throughout the applicationâ€™s lifetime.

  The choice of lifetime determines how and when the service instances are created and disposed of. Understanding these lifetimes is key to making the most of ServiceProvider.CreateScope().

  https://medium.com/@zaynt.dev/understanding-serviceprovider-createscope-in-net-a-deep-dive-a0d4549cc4b1
  */


  using var scope = app.Services.CreateScope();
  var services = scope.ServiceProvider;
  var context = services.GetRequiredService<StoreContext>();
  var userManager = services.GetRequiredService<UserManager<AppUser>>();

  await context.Database.MigrateAsync();
  await StoreContextSeed.SeedAsync(context, userManager);
}
catch (Exception ex)
{
  Console.WriteLine(ex);

}



app.Run();
